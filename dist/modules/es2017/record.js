import { isObject, isNone, merge } from '@orbit/utils';
export function cloneRecordIdentity(identity) {
    const { type, id } = identity;
    return { type, id };
}
export function equalRecordIdentities(record1, record2) {
    return (isNone(record1) && isNone(record2)) ||
        (isObject(record1) && isObject(record2) &&
            record1.type === record2.type &&
            record1.id === record2.id);
}
export function mergeRecords(current, updates) {
    if (current) {
        let record = cloneRecordIdentity(current);
        ['attributes', 'keys', 'relationships'].forEach(grouping => {
            if (current[grouping] && updates[grouping]) {
                record[grouping] = merge({}, current[grouping], updates[grouping]);
            }
            else if (current[grouping]) {
                record[grouping] = merge({}, current[grouping]);
            }
            else if (updates[grouping]) {
                record[grouping] = merge({}, updates[grouping]);
            }
        });
        return record;
    }
    else {
        return updates;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjb3JkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3JjL3JlY29yZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQVEsUUFBUSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxjQUFjLENBQUM7QUEyQjdELE1BQU0sOEJBQThCLFFBQXdCO0lBQzFELE1BQU0sRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEdBQUcsUUFBUSxDQUFDO0lBQzlCLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQztBQUN0QixDQUFDO0FBRUQsTUFBTSxnQ0FBZ0MsT0FBdUIsRUFBRSxPQUF1QjtJQUNwRixNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3BDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLFFBQVEsQ0FBQyxPQUFPLENBQUM7WUFDdEMsT0FBTyxDQUFDLElBQUksS0FBSyxPQUFPLENBQUMsSUFBSTtZQUM3QixPQUFPLENBQUMsRUFBRSxLQUFLLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNyQyxDQUFDO0FBRUQsTUFBTSx1QkFBdUIsT0FBc0IsRUFBRSxPQUFlO0lBQ2xFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDWixJQUFJLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUUxQyxDQUFDLFlBQVksRUFBRSxNQUFNLEVBQUUsZUFBZSxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ3pELEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMzQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsS0FBSyxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUUsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDckUsQ0FBQztZQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM3QixNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsS0FBSyxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNsRCxDQUFDO1lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzdCLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxLQUFLLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ2xELENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUFDLElBQUksQ0FBQyxDQUFDO1FBQ04sTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUNqQixDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpY3QsIGlzT2JqZWN0LCBpc05vbmUsIG1lcmdlIH0gZnJvbSAnQG9yYml0L3V0aWxzJztcblxuZXhwb3J0IGludGVyZmFjZSBSZWNvcmRJZGVudGl0eSB7XG4gIHR5cGU6IHN0cmluZztcbiAgaWQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZWNvcmRIYXNPbmVSZWxhdGlvbnNoaXAge1xuICBkYXRhOiBSZWNvcmRJZGVudGl0eSB8IG51bGw7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVjb3JkSGFzTWFueVJlbGF0aW9uc2hpcCB7XG4gIGRhdGE6IFJlY29yZElkZW50aXR5W107XG59XG5cbmV4cG9ydCB0eXBlIFJlY29yZFJlbGF0aW9uc2hpcCA9IFJlY29yZEhhc09uZVJlbGF0aW9uc2hpcCB8IFJlY29yZEhhc01hbnlSZWxhdGlvbnNoaXA7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVjb3JkIGV4dGVuZHMgUmVjb3JkSWRlbnRpdHkge1xuICBrZXlzPzogRGljdDxzdHJpbmc+O1xuICBhdHRyaWJ1dGVzPzogRGljdDxhbnk+O1xuICByZWxhdGlvbnNoaXBzPzogRGljdDxSZWNvcmRSZWxhdGlvbnNoaXA+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlY29yZEluaXRpYWxpemVyIHtcbiAgaW5pdGlhbGl6ZVJlY29yZChyZWNvcmQ6IFJlY29yZCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZVJlY29yZElkZW50aXR5KGlkZW50aXR5OiBSZWNvcmRJZGVudGl0eSk6IFJlY29yZElkZW50aXR5IHtcbiAgY29uc3QgeyB0eXBlLCBpZCB9ID0gaWRlbnRpdHk7XG4gIHJldHVybiB7IHR5cGUsIGlkIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlcXVhbFJlY29yZElkZW50aXRpZXMocmVjb3JkMTogUmVjb3JkSWRlbnRpdHksIHJlY29yZDI6IFJlY29yZElkZW50aXR5KTogYm9vbGVhbiB7XG4gIHJldHVybiAoaXNOb25lKHJlY29yZDEpICYmIGlzTm9uZShyZWNvcmQyKSkgfHxcbiAgICAgICAgIChpc09iamVjdChyZWNvcmQxKSAmJiBpc09iamVjdChyZWNvcmQyKSAmJlxuICAgICAgICAgIHJlY29yZDEudHlwZSA9PT0gcmVjb3JkMi50eXBlICYmXG4gICAgICAgICAgcmVjb3JkMS5pZCA9PT0gcmVjb3JkMi5pZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZVJlY29yZHMoY3VycmVudDogUmVjb3JkIHwgbnVsbCwgdXBkYXRlczogUmVjb3JkKTogUmVjb3JkIHtcbiAgaWYgKGN1cnJlbnQpIHtcbiAgICBsZXQgcmVjb3JkID0gY2xvbmVSZWNvcmRJZGVudGl0eShjdXJyZW50KTtcblxuICAgIFsnYXR0cmlidXRlcycsICdrZXlzJywgJ3JlbGF0aW9uc2hpcHMnXS5mb3JFYWNoKGdyb3VwaW5nID0+IHtcbiAgICAgIGlmIChjdXJyZW50W2dyb3VwaW5nXSAmJiB1cGRhdGVzW2dyb3VwaW5nXSkge1xuICAgICAgICByZWNvcmRbZ3JvdXBpbmddID0gbWVyZ2Uoe30sIGN1cnJlbnRbZ3JvdXBpbmddLCB1cGRhdGVzW2dyb3VwaW5nXSk7XG4gICAgICB9IGVsc2UgaWYgKGN1cnJlbnRbZ3JvdXBpbmddKSB7XG4gICAgICAgIHJlY29yZFtncm91cGluZ10gPSBtZXJnZSh7fSwgY3VycmVudFtncm91cGluZ10pO1xuICAgICAgfSBlbHNlIGlmICh1cGRhdGVzW2dyb3VwaW5nXSkge1xuICAgICAgICByZWNvcmRbZ3JvdXBpbmddID0gbWVyZ2Uoe30sIHVwZGF0ZXNbZ3JvdXBpbmddKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiByZWNvcmQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHVwZGF0ZXM7XG4gIH1cbn1cbiJdfQ==