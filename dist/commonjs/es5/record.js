'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.cloneRecordIdentity = cloneRecordIdentity;
exports.equalRecordIdentities = equalRecordIdentities;
exports.mergeRecords = mergeRecords;

var _utils = require('@orbit/utils');

function cloneRecordIdentity(identity) {
    var type = identity.type,
        id = identity.id;

    return { type: type, id: id };
}
function equalRecordIdentities(record1, record2) {
    return (0, _utils.isNone)(record1) && (0, _utils.isNone)(record2) || (0, _utils.isObject)(record1) && (0, _utils.isObject)(record2) && record1.type === record2.type && record1.id === record2.id;
}
function mergeRecords(current, updates) {
    if (current) {
        var record = cloneRecordIdentity(current);
        ['attributes', 'keys', 'relationships'].forEach(function (grouping) {
            if (current[grouping] && updates[grouping]) {
                record[grouping] = (0, _utils.merge)({}, current[grouping], updates[grouping]);
            } else if (current[grouping]) {
                record[grouping] = (0, _utils.merge)({}, current[grouping]);
            } else if (updates[grouping]) {
                record[grouping] = (0, _utils.merge)({}, updates[grouping]);
            }
        });
        return record;
    } else {
        return updates;
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjb3JkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3JjL3JlY29yZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxBQUFPLEFBQVEsQUFBUSxBQUFFLEFBQU0sQUFBRSxBQUFLLEFBQUUsQUFBTSxBQUFjLEFBQUMsQUEyQjdELEFBQU07OzZCQUE4QixBQUF3QixVQUMxRCxBQUFNO1FBQUUsQUFBSTtRQUFFLEFBQUUsQUFBRSxLQUFHLEFBQVEsQUFBQyxTQUM5QixBQUFNOztXQUFDLEVBQUUsQUFBSSxZQUFFLEFBQUUsQUFBRSxBQUFDLEFBQ3RCLElBQUM7QUFFRCxBQUFNOytCQUFnQyxBQUF1QixTQUFFLEFBQXVCLFNBQ3BGLEFBQU07V0FBRSxBQUFNLG1CQUFDLEFBQU8sQUFBQyxZQUFJLEFBQU0sbUJBQUMsQUFBTyxBQUFDLEFBQUMsQUFDcEMsQUFEQSxZQUNDLEFBQVEscUJBQUMsQUFBTyxBQUFDLFlBQUksQUFBUSxxQkFBQyxBQUFPLEFBQUMsWUFDdEMsQUFBTyxRQUFDLEFBQUksU0FBSyxBQUFPLFFBQUMsQUFBSSxRQUM3QixBQUFPLFFBQUMsQUFBRSxPQUFLLEFBQU8sUUFBQyxBQUFFLEFBQUMsQUFBQyxBQUNyQyxBQUFDO0FBRUQsQUFBTTtzQkFBdUIsQUFBc0IsU0FBRSxBQUFlLFNBQ2xFLEFBQUUsQUFBQztRQUFDLEFBQU8sQUFBQyxTQUFDLEFBQUMsQUFDWjtZQUFJLEFBQU0sU0FBRyxBQUFtQixvQkFBQyxBQUFPLEFBQUMsQUFBQyxBQUUxQztTQUFDLEFBQVksY0FBRSxBQUFNLFFBQUUsQUFBZSxBQUFDLGlCQUFDLEFBQU8sUUFBQyxBQUFRLEFBQUMsQUFBRSxvQkFDekQsQUFBRSxBQUFDO2dCQUFDLEFBQU8sUUFBQyxBQUFRLEFBQUMsYUFBSSxBQUFPLFFBQUMsQUFBUSxBQUFDLEFBQUMsV0FBQyxBQUFDLEFBQzNDLEFBQU07dUJBQUMsQUFBUSxBQUFDLFlBQUcsQUFBSyxrQkFBQyxBQUFFLElBQUUsQUFBTyxRQUFDLEFBQVEsQUFBQyxXQUFFLEFBQU8sUUFBQyxBQUFRLEFBQUMsQUFBQyxBQUFDLEFBQ3JFLEFBQUMsQUFBQyxBQUFJO3VCQUFLLEFBQU8sUUFBQyxBQUFRLEFBQUMsQUFBQyxXQUFDLEFBQUMsQUFDN0IsQUFBTTt1QkFBQyxBQUFRLEFBQUMsWUFBRyxBQUFLLGtCQUFDLEFBQUUsSUFBRSxBQUFPLFFBQUMsQUFBUSxBQUFDLEFBQUMsQUFBQyxBQUNsRCxBQUFDLEFBQUMsQUFBSTtBQUZDLEFBQUUsQUFBQyxtQkFFSCxBQUFFLEFBQUMsSUFBQyxBQUFPLFFBQUMsQUFBUSxBQUFDLEFBQUMsV0FBQyxBQUFDLEFBQzdCLEFBQU07dUJBQUMsQUFBUSxBQUFDLFlBQUcsQUFBSyxrQkFBQyxBQUFFLElBQUUsQUFBTyxRQUFDLEFBQVEsQUFBQyxBQUFDLEFBQUMsQUFDbEQsQUFBQyxBQUNIO0FBQUMsQUFBQyxBQUFDO0FBRUgsQUFBTTtlQUFDLEFBQU0sQUFBQyxBQUNoQixBQUFDLEFBQUMsQUFBSTtXQUFDLEFBQUMsQUFDTixBQUFNO2VBQUMsQUFBTyxBQUFDLEFBQ2pCLEFBQUMsQUFDSDtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGljdCwgaXNPYmplY3QsIGlzTm9uZSwgbWVyZ2UgfSBmcm9tICdAb3JiaXQvdXRpbHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlY29yZElkZW50aXR5IHtcbiAgdHlwZTogc3RyaW5nO1xuICBpZDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlY29yZEhhc09uZVJlbGF0aW9uc2hpcCB7XG4gIGRhdGE6IFJlY29yZElkZW50aXR5IHwgbnVsbDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZWNvcmRIYXNNYW55UmVsYXRpb25zaGlwIHtcbiAgZGF0YTogUmVjb3JkSWRlbnRpdHlbXTtcbn1cblxuZXhwb3J0IHR5cGUgUmVjb3JkUmVsYXRpb25zaGlwID0gUmVjb3JkSGFzT25lUmVsYXRpb25zaGlwIHwgUmVjb3JkSGFzTWFueVJlbGF0aW9uc2hpcDtcblxuZXhwb3J0IGludGVyZmFjZSBSZWNvcmQgZXh0ZW5kcyBSZWNvcmRJZGVudGl0eSB7XG4gIGtleXM/OiBEaWN0PHN0cmluZz47XG4gIGF0dHJpYnV0ZXM/OiBEaWN0PGFueT47XG4gIHJlbGF0aW9uc2hpcHM/OiBEaWN0PFJlY29yZFJlbGF0aW9uc2hpcD47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVjb3JkSW5pdGlhbGl6ZXIge1xuICBpbml0aWFsaXplUmVjb3JkKHJlY29yZDogUmVjb3JkKTogdm9pZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lUmVjb3JkSWRlbnRpdHkoaWRlbnRpdHk6IFJlY29yZElkZW50aXR5KTogUmVjb3JkSWRlbnRpdHkge1xuICBjb25zdCB7IHR5cGUsIGlkIH0gPSBpZGVudGl0eTtcbiAgcmV0dXJuIHsgdHlwZSwgaWQgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVxdWFsUmVjb3JkSWRlbnRpdGllcyhyZWNvcmQxOiBSZWNvcmRJZGVudGl0eSwgcmVjb3JkMjogUmVjb3JkSWRlbnRpdHkpOiBib29sZWFuIHtcbiAgcmV0dXJuIChpc05vbmUocmVjb3JkMSkgJiYgaXNOb25lKHJlY29yZDIpKSB8fFxuICAgICAgICAgKGlzT2JqZWN0KHJlY29yZDEpICYmIGlzT2JqZWN0KHJlY29yZDIpICYmXG4gICAgICAgICAgcmVjb3JkMS50eXBlID09PSByZWNvcmQyLnR5cGUgJiZcbiAgICAgICAgICByZWNvcmQxLmlkID09PSByZWNvcmQyLmlkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlUmVjb3JkcyhjdXJyZW50OiBSZWNvcmQgfCBudWxsLCB1cGRhdGVzOiBSZWNvcmQpOiBSZWNvcmQge1xuICBpZiAoY3VycmVudCkge1xuICAgIGxldCByZWNvcmQgPSBjbG9uZVJlY29yZElkZW50aXR5KGN1cnJlbnQpO1xuXG4gICAgWydhdHRyaWJ1dGVzJywgJ2tleXMnLCAncmVsYXRpb25zaGlwcyddLmZvckVhY2goZ3JvdXBpbmcgPT4ge1xuICAgICAgaWYgKGN1cnJlbnRbZ3JvdXBpbmddICYmIHVwZGF0ZXNbZ3JvdXBpbmddKSB7XG4gICAgICAgIHJlY29yZFtncm91cGluZ10gPSBtZXJnZSh7fSwgY3VycmVudFtncm91cGluZ10sIHVwZGF0ZXNbZ3JvdXBpbmddKTtcbiAgICAgIH0gZWxzZSBpZiAoY3VycmVudFtncm91cGluZ10pIHtcbiAgICAgICAgcmVjb3JkW2dyb3VwaW5nXSA9IG1lcmdlKHt9LCBjdXJyZW50W2dyb3VwaW5nXSk7XG4gICAgICB9IGVsc2UgaWYgKHVwZGF0ZXNbZ3JvdXBpbmddKSB7XG4gICAgICAgIHJlY29yZFtncm91cGluZ10gPSBtZXJnZSh7fSwgdXBkYXRlc1tncm91cGluZ10pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlY29yZDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdXBkYXRlcztcbiAgfVxufVxuIl19